#!/bin/bash
help="
################################################################################
# FILE:		generic
# SYNOPSIS:	Find value in hosts, master seedfile, Smarts, Clarify, and
#		check for SNMP and ICMP response
# USAGE:	generic NameOrIP CommString
# OPTION:	generic -4digit NameOrIP CommString
#		For single-tennant Smarts use device name with no 4-digit, or IP
#		For multi-tennant Smarts use device name with 4-digit, device
#		name without 4-digit using the switch option, or IP
# AUTHOR:	Chris Cook
# LAST MOD DATE:05/15/2018
# VERSION:      1.3.0 - adds White Label support; SMARTS buffs
#		1.2.3 - Accounts for a Failover implementation
#		1.2.2 - checks the master_seedfile_CN-AMPM0-99.txt
#		1.2.1 - strips like the parser
#               1.2 - real-time Clarify checking
################################################################################\n"

# Process no input
if [ -z "$1" ]; then echo -e "$HELP\007"; exit 0; fi

# Set environment variables
. /smarts/etc/SMARTS_ENV
. ~ora_atg/instantclient_10_2/envfile
export GREP_OPTIONS='--color=never'
DDDD=""
AMPM=""

# Predefine variables
COMM=`grep ^defaultReadCommunity $IP_DIR/local/conf/discovery/discovery.conf | awk -F'"' '{print $2}'` # Get Smarts' default Comm String
if [[ $1 == -* ]]; then # Process optional customer 4-digit
        DDDD=`echo $1 | awk -F'-' '{print $2}'`
        NODE=$2
        CS=${3:-$COMM} # set $CS to default community if not provided
else
	NODE=$1
	CS=${2:-$COMM} # set $CS to default community if not provided
fi
[[ -z $DDDD ]] && DDDD=`echo $HOSTNAME | sed 's/.*s//' | sed 's/[[:alpha:]]*$//'` # if no 4-digit was provided, make it something
fNODE=`echo $NODE | sed 's:\.:\\\&:g'` # fixes NODE to escape periods, helps with grep
HOSTNAME=`hostname | awk -F'.' '{print $1}'`
CHECK="/smartsxfr/bin/clarcheck.pl"

# Process provided input
clear
tput sgr0
echo
echo -e '\E[0;36m'"Looking for $NODE...\e[0m"

# --------------- HOSTS ---------------
echo
echo -e '\E[0;36m'" :: $NODE in hosts file ::\e[0m"
HOST=`egrep -i "^$fNODE[[:space:]]|[[:space:]]$fNODE[[:space:]]|[[:space:]]${fNODE}$" /etc/hosts` # find fixed criteria in hosts file
if [ -z "$HOST" ]; then # is criteria in hosts file?
	echo -e '\E[0;31m'"$NODE not found\e[0m"
	NAME="NotFound"
else
	echo "$HOST" | grep --color=always -i $fNODE 
	NAME=`echo "$HOST" | awk 'NR==1{print $2}'` # get $NAME from hosts file
	IP=`echo "$HOST" | awk 'NR==1{print $1}'` # get managed $IP from hosts file
fi

# --------------- MASTER SEED ---------------
echo
echo -e '\E[0;36m'" :: $NODE in master seedfile ::\e[0m"
SEED=`egrep -i "^$fNODE[[:space:]]|\=$fNODE[[:space:]]|\=${fNODE}$" /smarts/seedfiles/master_seedfile_*-AMPM[0-9][0-9].txt` # find fixed criteria in master seed
if [ -z "$SEED" ]; then # is criteria in master seed?
	echo -e '\E[0;31m'"$NODE not found\e[0m"
else
	echo "$SEED" | grep --color=always -i $fNODE
fi

# --------------- SMARTS ---------------
echo 
if [[ `echo $NAME | awk -F"_" '{print $1}'` = WL* ]]; then
	AMPM=`brcontrol | awk  '{print$1}' | grep -i 'WLbl-AMPM'` # get AMPM name
	CS='WhiteLabel_5173'
else
	AMPM=`brcontrol | awk  '{print$1}' | grep -i "$DDDD-AMPM"` # get AMPM name
fi
inSmarts=$(dmctl -s $AMPM get IP::IP-$IP::HostedBy)

echo -e '\E[0;36m'" :: $NODE in Smarts [$AMPM] ::\e[0m"

if [ -n $inSmarts ]; then
	
	dmctl -s $AMPM get $inSmarts | egrep -w 'DisplayName|SNMPAddress|DiscoveredLastAt|IsManaged|IsUnresponsive|CreationClassName|Model'
	AMOD="`dmctl -s $AMPM get $inSmarts::AccessMode`" # gets AccessMode for later
else 
	echo "$NODE is not currently monitored"
fi

# --------------- CLARIFY ---------------
echo

ClarifyNAME () {
if [[ $DDDD != [0-9][0-9][0-9][0-9] ]]; then # if $DDDD isn't actually 4 numbers
	if [[ $NODE == *_[0-9][0-9][0-9][0-9] ]]; then # then maybe the entered string has the 4-digit
		DDDD=`echo $NODE | awk -F'_' '{print $NF}'` # keeps last 4 numbers
		cNAME=`echo $NODE | sed 's/_[0-9][0-9][0-9][0-9]$//'` # strips last 4 numbers
		echo -e '\E[0;36m'" :: $NODE in Clarify [$DDDD]::\e[0m"
		perl $CHECK $DDDD $cNAME
	else
		echo -e '\E[0;36m'" :: $NODE in Clarify [$DDDD]::\e[0m"
		echo -e '\E[0;31m'"Unable to determine customer 4-digit from search criteria or server hostname.\e[0m"
		echo "Type just \"generic\" for help\\usage."
	fi
else
	echo -e '\E[0;36m'" :: $NODE in Clarify [$DDDD]::\e[0m"
	perl $CHECK $DDDD ${NODE/\.*/}
fi
}

ClarifyIP () {
if [ $NAME != "NotFound" ]; then # if a name is found in hosts
	if [[ $DDDD != [0-9][0-9][0-9][0-9] ]]; then # if $DDDD isn't actually 4 numbers
		if [[ $NAME == *_[0-9][0-9][0-9][0-9] ]]; then # then maybe the entered string has the 4-digit
			DDDD=`echo $NAME | awk -F'_' '{print $NF}'` # keeps last 4 numbers
			cNAME=`echo $NAME | sed 's/_[0-9][0-9][0-9][0-9]$//'` # strips last 4 numbers
			echo -e '\E[0;36m'" :: $cNAME in Clarify [$DDDD] ::\e[0m"
			perl $CHECK $DDDD $cNAME
		else
			echo -e '\E[0;36m'" :: $NODE in Clarify [$DDDD] ::\e[0m"
			echo -e '\E[0;31m'"Unable to determine search criteria.\e[0m"
			echo "Type just \"generic\" for help\\usage."
		fi
	else
		echo -e '\E[0;36m'" :: $NAME in Clarify [$DDDD] ::\e[0m"
		perl $CHECK $DDDD $NAME # then use the hosts file name $2
	fi
else
	echo -e '\E[0;36m'" :: $NODE in Clarify [$DDDD] ::\e[0m"
	echo -e '\E[0;31m'"Unable to query Clarify by IP, try again with a name\e[0m"
	echo "Type just \"generic\" for help\\usage."
fi
}
Clarify () {
if [[ $NODE == `echo $NODE | egrep '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}'` ]]; then # if user is searching with an IP
	ClarifyIP # runs if IP
else
	ClarifyNAME # runs if not IP
fi
}
if [[ -e "$CHECK" ]]; then
	 Clarify
else 
	echo -e '\E[0;36m'" :: $NODE in Clarify ::\e[0m\nClarify dependency missing $CHECK"
fi

# --------------- SNMP ---------------
echo
ifAddr=`ps -ef | grep $AMPM | grep useif | awk -F "=" '{print $2"\t"$6}' | awk '{print $3}'` # get interface address

echo -e '\E[0;36m'" :: $NODE SNMP response from interface: $ifAddr ::\e[0m"
if [ -z "$2" ]; then # was a CommString provided?
	echo -e '\E[0;35m'"CommString not provided, let's try the Smarts default: $COMM\e[0m"
fi
[[ "$AMOD" == "ICMPONLY" ]] && echo -e "$NODE is monitored as \E[0;31m$AMOD\E[0m" || sm_snmp  --useif="$ifAddr" --port=161 --snmp=2c --community="$CS" --dest=$NODE get .1.3.6.1.2.1.1.1.0 .1.3.6.1.2.1.1.5.0

# --------------- ICMP ---------------
echo

echo -e '\E[0;36m'" :: $NODE ICMP response from interface $ifAddr ::\e[0m"
# ping -c 2 $NODE
ping -c 3 -i 0.5 -f -W 1 -I $ifAddr $NODE
echo
echo -e "\007"
